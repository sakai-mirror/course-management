<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN"
   "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
<hibernate-mapping default-cascade="none" package="org.sakaiproject.coursemanagement.impl">
	<subclass name="org.sakaiproject.coursemanagement.impl.SectionImpl"
			extends="org.sakaiproject.coursemanagement.impl.AbstractMembershipContainer">

		<property name="category" column="CATEGORY" type="string" />

		<many-to-one name="courseOffering" column="COURSE_OFFERING" index="CM_SECTION_COURSE_IDX" class="org.sakaiproject.coursemanagement.impl.CourseOfferingImpl" />
		<many-to-one name="enrollmentSet" column="ENROLLMENT_SET" index="CM_SECTION_ENR_SET_IDX" class="org.sakaiproject.coursemanagement.impl.EnrollmentSetImpl" />
		<many-to-one name="parent" column="PARENT_SECTION" index="CM_SECTION_PARENT_IDX" class="org.sakaiproject.coursemanagement.impl.SectionImpl" />

	</subclass>

    <query name="findSectionByEid">
        <![CDATA[
        from SectionImpl as sec where sec.eid=:eid
        ]]>
    </query>

    <query name="findTopLevelSectionsInCourseOffering">
        <![CDATA[
        from SectionImpl as sec where sec.courseOffering=:courseOffering and sec.parent is null
        ]]>
    </query>

    <query name="findChildSections">
        <![CDATA[
        from SectionImpl as sec where sec.parent.eid=:parentEid
        ]]>
    </query>

	<query name="findCurrentSectionsWithMember">
        <![CDATA[
        select section from SectionImpl as section, MembershipImpl as member
        	where member.userId=:userId and
        	member.memberContainer=section and
        	(section.courseOffering.startDate is null or section.courseOffering.startDate <= sysdate) and
        	(section.courseOffering.endDate is null or section.courseOffering.endDate >= sysdate)
        ]]>
    </query>

<!-- 
	<query name="findMembersInCurrentSections">
        <![CDATA[
        select member from MembershipImpl as member, SectionImpl as section
        	where member.userId=:userId and
        	member.memberContainer=section and
        	(section.courseOffering.startDate is null or section.courseOffering.startDate <= sysdate) and
        	(section.courseOffering.endDate is null or section.courseOffering.endDate >= sysdate)
        ]]>
    </query>
-->

<!-- 
    <query name="findSectionMembership">
        <![CDATA[
        select member from MembershipImpl as member, SectionImpl as section
        	where member.memberContainer=section
        	and section.eid=:sectionEid
        	and member.userId=:userId
        ]]>
    </query>
-->

</hibernate-mapping>